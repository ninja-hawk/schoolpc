
// @file calc.v
// @brief 簡単な電卓
// @author Yusuke Matsunaga (松永 裕介)
//
// Copyright (C) 2019 Yusuke Matsunaga
// All rights reserved.
//
// [概要]
// 簡単な電卓を実装する．
// * clear が押されたら ibuf, cbuf をクリアする．
// * plus が押されたら ibuf の値を cbuf に転送して ibuf をクリアする．
// * equal が押されたら cbuf に ibuf の値を足して ibuf をクリアする．
//
// [入出力]
// clock:   クロック
// reset:   リセット
// keys:    テンキーの値
// clear:   クリア信号
// plus:    `+'信号
// equal:   `='信号
// ibuf:    入力バッファの値
// cbuf:    計算結果バッファの値

module calc(input         clock,
	    input 	  reset,
	    input [15:0]  keys,
	    input 	  clear,
	    input 	  plus,
	    input 	  equal,
	    output reg [31:0] ibuf,
	    output reg [31:0] cbuf);
		 		 
		 
wire key_in;
wire [3:0] key_val;
keyenc enc(.keys(keys), .key_in(key_in), .key_val(key_val));
reg [31:0] REGA, REGB,REGB_o;
reg carry,carry_o;
reg equal_reg;
reg carry1,carry2,carry3,carry4,carry5,carry6, carry7;
		 
always @(posedge clock or negedge reset)
begin
	if(!reset)
	begin REGA <= 0; REGB <= 0; carry=0; equal_reg <=0; end
	else if(clear)
	begin REGA <= 0; REGB <= 0; carry=0; equal_reg <=0; end
	else if(key_in)
	begin 
		REGA <= (REGA << 4) + key_val;
		if(plus)
		begin
		{carry1, REGB_o[3:0]} <= REGB[3:0] + REGA[3:0] + carry;
		{carry2, REGB_o[7:3]} <= REGB[7:3] + REGA[7:3] + carry1;
		{carry3, REGB_o[11:7]} <= REGB[11:7] + REGA[11:7] + carry2;
		{carry4, REGB_o[15:11]} <= REGB[15:11] + REGA[15:11] + carry3;
		{carry5, REGB_o[19:15]} <= REGB[19:15] + REGA[19:15] + carry4;
		{carry6, REGB_o[23:19]} <= REGB[23:19] + REGA[23:19] + carry5;
		{carry7, REGB_o[27:23]} <= REGB[27:23] + REGA[27:23] + carry6;
		{carry_o, REGB_o[31:27]} <= REGB[31:27] + REGA[31:27] + carry7;
		REGB <= REGB_o;
		carry <= carry_o;
		REGA <= 0;
		end
		else if(equal)
		begin
		{carry1, REGB_o[3:0]} <= REGB[3:0] + REGA[3:0] + carry;
		{carry2, REGB_o[7:3]} <= REGB[7:3] + REGA[7:3] + carry1;
		{carry3, REGB_o[11:7]} <= REGB[11:7] + REGA[11:7] + carry2;
		{carry4, REGB_o[15:11]} <= REGB[15:11] + REGA[15:11] + carry3;
		{carry5, REGB_o[19:15]} <= REGB[19:15] + REGA[19:15] + carry4;
		{carry6, REGB_o[23:19]} <= REGB[23:19] + REGA[23:19] + carry5;
		{carry7, REGB_o[27:23]} <= REGB[27:23] + REGA[27:23] + carry6;
		{carry_o, REGB_o[31:27]} <= REGB[31:27] + REGA[31:27] + carry7;
		REGB <= REGB_o;
		carry <= 0;
		REGA <= 0;
		end
		
		ibuf <= REGA;
		if(!equal_reg)
		begin cbuf <= REGA; end
		else
		begin cbuf <= REGB; end
		end

//	cbuf <= (equal_reg == 0)?REGA:REGB;

end

endmodule // calc
